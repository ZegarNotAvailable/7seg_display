
7seg_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b3c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800307c  0800307c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800307c  0800307c  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003084  08003084  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003088  08003088  00013088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800308c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08003098  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003098  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc58  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9b  00000000  00000000  0002bc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002db30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002e510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016839  00000000  00000000  0002ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9dc  00000000  00000000  00045651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008829d  00000000  00000000  0005202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da2ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f8  00000000  00000000  000da31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002cbc 	.word	0x08002cbc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002cbc 	.word	0x08002cbc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	; 0x30
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
 80004e8:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80004f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80004f8:	6879      	ldr	r1, [r7, #4]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	1acb      	subs	r3, r1, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bfb8      	it	lt
 8000502:	425b      	neglt	r3, r3
 8000504:	429a      	cmp	r2, r3
 8000506:	bfcc      	ite	gt
 8000508:	2301      	movgt	r3, #1
 800050a:	2300      	movle	r3, #0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000510:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00b      	beq.n	8000530 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000522:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	623b      	str	r3, [r7, #32]
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	6a3b      	ldr	r3, [r7, #32]
 800052e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dd0b      	ble.n	8000550 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	61fb      	str	r3, [r7, #28]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	61bb      	str	r3, [r7, #24]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	b29a      	uxth	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	b29b      	uxth	r3, r3
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	b29b      	uxth	r3, r3
 800055c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	bfb8      	it	lt
 8000568:	425b      	neglt	r3, r3
 800056a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800056c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000570:	0fda      	lsrs	r2, r3, #31
 8000572:	4413      	add	r3, r2
 8000574:	105b      	asrs	r3, r3, #1
 8000576:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	da02      	bge.n	8000586 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000580:	2301      	movs	r3, #1
 8000582:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000584:	e02e      	b.n	80005e4 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8000586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800058a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800058c:	e02a      	b.n	80005e4 <GFX_WriteLine+0x108>
	        if (steep) {
 800058e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000592:	2b00      	cmp	r3, #0
 8000594:	d008      	beq.n	80005a8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	b21b      	sxth	r3, r3
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	b211      	sxth	r1, r2
 800059e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fc60 	bl	8000e66 <ILI9341_WritePixel>
 80005a6:	e007      	b.n	80005b8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	b211      	sxth	r1, r2
 80005b0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fc57 	bl	8000e66 <ILI9341_WritePixel>
	        }
	        err -= dy;
 80005b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80005ba:	8abb      	ldrh	r3, [r7, #20]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	b29b      	uxth	r3, r3
 80005c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80005c2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	da09      	bge.n	80005de <GFX_WriteLine+0x102>
	            y_start += ystep;
 80005ca:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	4413      	add	r3, r2
 80005d2:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80005d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80005d6:	8afb      	ldrh	r3, [r7, #22]
 80005d8:	4413      	add	r3, r2
 80005da:	b29b      	uxth	r3, r3
 80005dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	ddd0      	ble.n	800058e <GFX_WriteLine+0xb2>
	        }
	    }
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	3730      	adds	r7, #48	; 0x30
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b086      	sub	sp, #24
 80005fa:	af02      	add	r7, sp, #8
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
 8000602:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	1e5a      	subs	r2, r3, #1
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	4613      	mov	r3, r2
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	68f8      	ldr	r0, [r7, #12]
 8000618:	f7ff ff60 	bl	80004dc <GFX_WriteLine>
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	4611      	mov	r1, r2
 8000630:	461a      	mov	r2, r3
 8000632:	460b      	mov	r3, r1
 8000634:	80fb      	strh	r3, [r7, #6]
 8000636:	4613      	mov	r3, r2
 8000638:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e008      	b.n	8000652 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8000640:	88ba      	ldrh	r2, [r7, #4]
 8000642:	8c3b      	ldrh	r3, [r7, #32]
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	6978      	ldr	r0, [r7, #20]
 8000648:	f7ff ffd5 	bl	80005f6 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3301      	adds	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	88fa      	ldrh	r2, [r7, #6]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4413      	add	r3, r2
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	429a      	cmp	r2, r3
 800065c:	dbf0      	blt.n	8000640 <GFX_DrawFillRectangle+0x1c>
    }

}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <DisplayInit>:

// Display Init
void DisplayInit(T7Display* Display, uint8_t N_Digits, uint8_t 	N_Segments, uint16_t X_position, uint16_t Y_position,
		 uint16_t B_Ground_Color, uint16_t Seg_ON_Color, uint16_t Seg_OFF_Color)

{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	4608      	mov	r0, r1
 8000672:	4611      	mov	r1, r2
 8000674:	461a      	mov	r2, r3
 8000676:	4603      	mov	r3, r0
 8000678:	70fb      	strb	r3, [r7, #3]
 800067a:	460b      	mov	r3, r1
 800067c:	70bb      	strb	r3, [r7, #2]
 800067e:	4613      	mov	r3, r2
 8000680:	803b      	strh	r3, [r7, #0]
	Display->N_Digits = N_Digits; // Set initial size of display
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	78fa      	ldrb	r2, [r7, #3]
 8000686:	701a      	strb	r2, [r3, #0]
	Display->N_Segments = N_Segments;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	78ba      	ldrb	r2, [r7, #2]
 800068c:	705a      	strb	r2, [r3, #1]
	Display->X_position = X_position;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	883a      	ldrh	r2, [r7, #0]
 8000692:	805a      	strh	r2, [r3, #2]
	Display->Y_position = Y_position;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	8a3a      	ldrh	r2, [r7, #16]
 8000698:	809a      	strh	r2, [r3, #4]
	Display->B_Ground_Color = B_Ground_Color; //
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	8aba      	ldrh	r2, [r7, #20]
 800069e:	80da      	strh	r2, [r3, #6]
	Display->Seg_ON_Color = Seg_ON_Color; //
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	8b3a      	ldrh	r2, [r7, #24]
 80006a4:	811a      	strh	r2, [r3, #8]
	Display->Seg_OFF_Color = Seg_OFF_Color; //
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	8bba      	ldrh	r2, [r7, #28]
 80006aa:	815a      	strh	r2, [r3, #10]
	//Display->SEG7_buf[N_Digits];	// =	{ 0, 0, 0, 0, 0, 0, 0, 0 }; //Buffer
	SEG7_make_display(Display);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f966 	bl	800097e <SEG7_make_display>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <DisplaySetColor>:

void DisplaySetColor(T7Display* Display,  uint8_t Seg_ON_Color)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
  Display->Seg_ON_Color = Colors[Seg_ON_Color]; //
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <DisplaySetColor+0x24>)
 80006cc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	811a      	strh	r2, [r3, #8]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	08002ce0 	.word	0x08002ce0

080006e4 <DisplayGetColor>:

uint16_t DisplayGetColor(T7Display* Display)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  return Display->Seg_ON_Color;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	891b      	ldrh	r3, [r3, #8]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <SEG7_print_display>:
	  { 13, 25, 5, 18 },	//segment L
	  { 6, 27, 7, 16 }	//segment M
    };

void SEG7_print_display (T7Display* Display, uint8_t mesage)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  uint16_t segments;
  char CHR;
    for (i = 0; i < Display->N_Digits; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]
 800070c:	e03d      	b.n	800078a <SEG7_print_display+0x8e>
      {
        CHR = ColorsNames[mesage][i];
 800070e:	78fa      	ldrb	r2, [r7, #3]
 8000710:	7bf9      	ldrb	r1, [r7, #15]
 8000712:	4823      	ldr	r0, [pc, #140]	; (80007a0 <SEG7_print_display+0xa4>)
 8000714:	4613      	mov	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	4413      	add	r3, r2
 800071a:	4403      	add	r3, r0
 800071c:	440b      	add	r3, r1
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	72fb      	strb	r3, [r7, #11]
	if (CHR > 'Z')				//change to capitals
 8000722:	7afb      	ldrb	r3, [r7, #11]
 8000724:	2b5a      	cmp	r3, #90	; 0x5a
 8000726:	d902      	bls.n	800072e <SEG7_print_display+0x32>
          {
            CHR -= 0x20;
 8000728:	7afb      	ldrb	r3, [r7, #11]
 800072a:	3b20      	subs	r3, #32
 800072c:	72fb      	strb	r3, [r7, #11]
          }
	if (CHR > '/' && CHR < ':')		//digits
 800072e:	7afb      	ldrb	r3, [r7, #11]
 8000730:	2b2f      	cmp	r3, #47	; 0x2f
 8000732:	d908      	bls.n	8000746 <SEG7_print_display+0x4a>
 8000734:	7afb      	ldrb	r3, [r7, #11]
 8000736:	2b39      	cmp	r3, #57	; 0x39
 8000738:	d805      	bhi.n	8000746 <SEG7_print_display+0x4a>
          {
            segments = HEX7SEG[CHR-'0'];
 800073a:	7afb      	ldrb	r3, [r7, #11]
 800073c:	3b30      	subs	r3, #48	; 0x30
 800073e:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <SEG7_print_display+0xa8>)
 8000740:	5cd3      	ldrb	r3, [r2, r3]
 8000742:	81bb      	strh	r3, [r7, #12]
 8000744:	e018      	b.n	8000778 <SEG7_print_display+0x7c>
          }
	else if (CHR > '@' && CHR < '[')	//letters
 8000746:	7afb      	ldrb	r3, [r7, #11]
 8000748:	2b40      	cmp	r3, #64	; 0x40
 800074a:	d913      	bls.n	8000774 <SEG7_print_display+0x78>
 800074c:	7afb      	ldrb	r3, [r7, #11]
 800074e:	2b5a      	cmp	r3, #90	; 0x5a
 8000750:	d810      	bhi.n	8000774 <SEG7_print_display+0x78>
	  {
	    if (Display->N_Segments == 14)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	785b      	ldrb	r3, [r3, #1]
 8000756:	2b0e      	cmp	r3, #14
 8000758:	d106      	bne.n	8000768 <SEG7_print_display+0x6c>
	      {
		segments = CHR14SEG[CHR-'A'];
 800075a:	7afb      	ldrb	r3, [r7, #11]
 800075c:	3b41      	subs	r3, #65	; 0x41
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <SEG7_print_display+0xac>)
 8000760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000764:	81bb      	strh	r3, [r7, #12]
	    if (Display->N_Segments == 14)
 8000766:	e007      	b.n	8000778 <SEG7_print_display+0x7c>
	      }
	    else
	      {
		segments = CHR7SEG[CHR-'A'];
 8000768:	7afb      	ldrb	r3, [r7, #11]
 800076a:	3b41      	subs	r3, #65	; 0x41
 800076c:	4a0f      	ldr	r2, [pc, #60]	; (80007ac <SEG7_print_display+0xb0>)
 800076e:	5cd3      	ldrb	r3, [r2, r3]
 8000770:	81bb      	strh	r3, [r7, #12]
	    if (Display->N_Segments == 14)
 8000772:	e001      	b.n	8000778 <SEG7_print_display+0x7c>
	      }

	  }
	else segments = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	81bb      	strh	r3, [r7, #12]
	SEG7_write_display(Display, i, segments);
 8000778:	89ba      	ldrh	r2, [r7, #12]
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	4619      	mov	r1, r3
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f000 f8c2 	bl	8000908 <SEG7_write_display>
    for (i = 0; i < Display->N_Digits; i++)
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	3301      	adds	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	7bfa      	ldrb	r2, [r7, #15]
 8000790:	429a      	cmp	r2, r3
 8000792:	d3bc      	bcc.n	800070e <SEG7_print_display+0x12>
//	      }
//	  }
//	Display->SEG7_buf[i] = segments;
      }

}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	08002d08 	.word	0x08002d08
 80007a4:	08002db4 	.word	0x08002db4
 80007a8:	08002de0 	.word	0x08002de0
 80007ac:	08002dc4 	.word	0x08002dc4

080007b0 <SEG7_print_ASCII>:

void SEG7_print_ASCII (T7Display* Display, uint8_t start, char* message)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	460b      	mov	r3, r1
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	72fb      	strb	r3, [r7, #11]
  uint8_t i;	//pointer of digit on display
  uint8_t j;	//pointer of message character

  uint16_t segments;
  char CHR;
    for (i = start, j = 0; i <= Display->N_Digits; i++ , j++)
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	75fb      	strb	r3, [r7, #23]
 80007c2:	2300      	movs	r3, #0
 80007c4:	75bb      	strb	r3, [r7, #22]
 80007c6:	e05b      	b.n	8000880 <SEG7_print_ASCII+0xd0>
      {
        CHR = message[j];
 80007c8:	7dbb      	ldrb	r3, [r7, #22]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	74fb      	strb	r3, [r7, #19]
        if ((CHR == '.') && (i > 0))
 80007d2:	7cfb      	ldrb	r3, [r7, #19]
 80007d4:	2b2e      	cmp	r3, #46	; 0x2e
 80007d6:	d11c      	bne.n	8000812 <SEG7_print_ASCII+0x62>
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d019      	beq.n	8000812 <SEG7_print_ASCII+0x62>
            {
	      Display->SEG7_buf[i- 1] |= SEGMENT_DOT;
 80007de:	7dfb      	ldrb	r3, [r7, #23]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	3304      	adds	r3, #4
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	889a      	ldrh	r2, [r3, #4]
 80007ec:	7dfb      	ldrb	r3, [r7, #23]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007f4:	b291      	uxth	r1, r2
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	3304      	adds	r3, #4
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	460a      	mov	r2, r1
 8000800:	809a      	strh	r2, [r3, #4]
	      j++;
 8000802:	7dbb      	ldrb	r3, [r7, #22]
 8000804:	3301      	adds	r3, #1
 8000806:	75bb      	strb	r3, [r7, #22]
	      CHR = message[j];
 8000808:	7dbb      	ldrb	r3, [r7, #22]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	74fb      	strb	r3, [r7, #19]
            }

	if (CHR > 'Z')				//change to capitals
 8000812:	7cfb      	ldrb	r3, [r7, #19]
 8000814:	2b5a      	cmp	r3, #90	; 0x5a
 8000816:	d902      	bls.n	800081e <SEG7_print_ASCII+0x6e>
          {
            CHR -= 0x20;
 8000818:	7cfb      	ldrb	r3, [r7, #19]
 800081a:	3b20      	subs	r3, #32
 800081c:	74fb      	strb	r3, [r7, #19]
          }
        if (CHR > '/' && CHR < ':')		//digits
 800081e:	7cfb      	ldrb	r3, [r7, #19]
 8000820:	2b2f      	cmp	r3, #47	; 0x2f
 8000822:	d908      	bls.n	8000836 <SEG7_print_ASCII+0x86>
 8000824:	7cfb      	ldrb	r3, [r7, #19]
 8000826:	2b39      	cmp	r3, #57	; 0x39
 8000828:	d805      	bhi.n	8000836 <SEG7_print_ASCII+0x86>
          {
            segments = HEX7SEG[CHR-'0'];
 800082a:	7cfb      	ldrb	r3, [r7, #19]
 800082c:	3b30      	subs	r3, #48	; 0x30
 800082e:	4a19      	ldr	r2, [pc, #100]	; (8000894 <SEG7_print_ASCII+0xe4>)
 8000830:	5cd3      	ldrb	r3, [r2, r3]
 8000832:	82bb      	strh	r3, [r7, #20]
 8000834:	e018      	b.n	8000868 <SEG7_print_ASCII+0xb8>
          }
	else if (CHR > '@' && CHR < '[')	//letters
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	2b40      	cmp	r3, #64	; 0x40
 800083a:	d913      	bls.n	8000864 <SEG7_print_ASCII+0xb4>
 800083c:	7cfb      	ldrb	r3, [r7, #19]
 800083e:	2b5a      	cmp	r3, #90	; 0x5a
 8000840:	d810      	bhi.n	8000864 <SEG7_print_ASCII+0xb4>
	  {
	    if (Display->N_Segments == 14)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	785b      	ldrb	r3, [r3, #1]
 8000846:	2b0e      	cmp	r3, #14
 8000848:	d106      	bne.n	8000858 <SEG7_print_ASCII+0xa8>
	      {
		segments = CHR14SEG[CHR - 'A'];
 800084a:	7cfb      	ldrb	r3, [r7, #19]
 800084c:	3b41      	subs	r3, #65	; 0x41
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <SEG7_print_ASCII+0xe8>)
 8000850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000854:	82bb      	strh	r3, [r7, #20]
	    if (Display->N_Segments == 14)
 8000856:	e007      	b.n	8000868 <SEG7_print_ASCII+0xb8>
	      }
	    else
	      {
		segments = CHR7SEG[CHR - 'A'];
 8000858:	7cfb      	ldrb	r3, [r7, #19]
 800085a:	3b41      	subs	r3, #65	; 0x41
 800085c:	4a0f      	ldr	r2, [pc, #60]	; (800089c <SEG7_print_ASCII+0xec>)
 800085e:	5cd3      	ldrb	r3, [r2, r3]
 8000860:	82bb      	strh	r3, [r7, #20]
	    if (Display->N_Segments == 14)
 8000862:	e001      	b.n	8000868 <SEG7_print_ASCII+0xb8>
	      }

	  }
	else segments = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	82bb      	strh	r3, [r7, #20]
	SEG7_write_display(Display, i, segments);
 8000868:	8aba      	ldrh	r2, [r7, #20]
 800086a:	7dfb      	ldrb	r3, [r7, #23]
 800086c:	4619      	mov	r1, r3
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f000 f84a 	bl	8000908 <SEG7_write_display>
    for (i = start, j = 0; i <= Display->N_Digits; i++ , j++)
 8000874:	7dfb      	ldrb	r3, [r7, #23]
 8000876:	3301      	adds	r3, #1
 8000878:	75fb      	strb	r3, [r7, #23]
 800087a:	7dbb      	ldrb	r3, [r7, #22]
 800087c:	3301      	adds	r3, #1
 800087e:	75bb      	strb	r3, [r7, #22]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	7dfa      	ldrb	r2, [r7, #23]
 8000886:	429a      	cmp	r2, r3
 8000888:	d99e      	bls.n	80007c8 <SEG7_print_ASCII+0x18>
      }

}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	08002db4 	.word	0x08002db4
 8000898:	08002de0 	.word	0x08002de0
 800089c:	08002dc4 	.word	0x08002dc4

080008a0 <SEG7_HEX_display>:

void SEG7_HEX_display (T7Display* Display, uint16_t value)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  uint8_t segments;
  uint8_t HEX;
  for (i = 0; i < Display->N_Digits; i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e01c      	b.n	80008ec <SEG7_HEX_display+0x4c>
    {
      HEX = (value >> 4 * i) & 0x0f;
 80008b2:	887a      	ldrh	r2, [r7, #2]
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	fa42 f303 	asr.w	r3, r2, r3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	73bb      	strb	r3, [r7, #14]
      segments = HEX7SEG[HEX];
 80008c4:	7bbb      	ldrb	r3, [r7, #14]
 80008c6:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <SEG7_HEX_display+0x64>)
 80008c8:	5cd3      	ldrb	r3, [r2, r3]
 80008ca:	737b      	strb	r3, [r7, #13]
      SEG7_write_display(Display, (Display->N_Digits -1 - i), segments);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	3b01      	subs	r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	7b7a      	ldrb	r2, [r7, #13]
 80008dc:	b292      	uxth	r2, r2
 80008de:	4619      	mov	r1, r3
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f000 f811 	bl	8000908 <SEG7_write_display>
  for (i = 0; i < Display->N_Digits; i++)
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	3301      	adds	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	7bfa      	ldrb	r2, [r7, #15]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d3dd      	bcc.n	80008b2 <SEG7_HEX_display+0x12>
//      		segments |= 0x300;	//segments G1 and G2
//      	      }
//      	  }
//      Display->SEG7_buf[Display->N_Digits -1 - i] = segments;
    }
  SEG7_draw_display (Display);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f828 	bl	800094c <SEG7_draw_display>
}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	08002db4 	.word	0x08002db4

08000908 <SEG7_write_display>:

void SEG7_write_display(T7Display* Display, uint8_t digit, uint16_t segments)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
 8000914:	4613      	mov	r3, r2
 8000916:	803b      	strh	r3, [r7, #0]
  if (Display->N_Segments == 14)	//If display type 14-segments set G1 and G2 instead of G
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	785b      	ldrb	r3, [r3, #1]
 800091c:	2b0e      	cmp	r3, #14
 800091e:	d108      	bne.n	8000932 <SEG7_write_display+0x2a>
  	  {
  	    if (segments & 0x40)	//segment G
 8000920:	883b      	ldrh	r3, [r7, #0]
 8000922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <SEG7_write_display+0x2a>
  	      {
  		segments |= 0x300;	//segments G1 and G2
 800092a:	883b      	ldrh	r3, [r7, #0]
 800092c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000930:	803b      	strh	r3, [r7, #0]
  	      }
  	  }
  Display->SEG7_buf[digit] = segments;	//DOT,G,F,E,D,C,B,A or M,L,K,J,I,H,G2,G1,DOT,G,F,E,D,C,B,A
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	3304      	adds	r3, #4
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	883a      	ldrh	r2, [r7, #0]
 800093e:	809a      	strh	r2, [r3, #4]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SEG7_draw_display>:

void SEG7_draw_display (T7Display* Display)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint8_t digit;
  for (digit = 0; digit < Display->N_Digits; digit++)
 8000954:	2300      	movs	r3, #0
 8000956:	73fb      	strb	r3, [r7, #15]
 8000958:	e007      	b.n	800096a <SEG7_draw_display+0x1e>
    {
      SEG7_draw_digit(Display, digit);
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	4619      	mov	r1, r3
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 f874 	bl	8000a4c <SEG7_draw_digit>
  for (digit = 0; digit < Display->N_Digits; digit++)
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	3301      	adds	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	7bfa      	ldrb	r2, [r7, #15]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3f2      	bcc.n	800095a <SEG7_draw_display+0xe>
    }
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <SEG7_make_display>:

void SEG7_make_display (T7Display* Display)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af02      	add	r7, sp, #8
 8000984:	6078      	str	r0, [r7, #4]
  GFX_DrawFillRectangle (Display->Y_position, Display->X_position, (SEG7_DIGIT_HIGH + 2 * SEG7_HIGH_SP),
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	889b      	ldrh	r3, [r3, #4]
 800098a:	4618      	mov	r0, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	885b      	ldrh	r3, [r3, #2]
 8000990:	4619      	mov	r1, r3
			 (Display->N_Digits * SEG7_DIGIT_WIDTH), Display->B_Ground_Color);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
  GFX_DrawFillRectangle (Display->Y_position, Display->X_position, (SEG7_DIGIT_HIGH + 2 * SEG7_HIGH_SP),
 8000996:	b29b      	uxth	r3, r3
 8000998:	461a      	mov	r2, r3
 800099a:	0092      	lsls	r2, r2, #2
 800099c:	4413      	add	r3, r2
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	88db      	ldrh	r3, [r3, #6]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	4613      	mov	r3, r2
 80009aa:	2246      	movs	r2, #70	; 0x46
 80009ac:	f7ff fe3a 	bl	8000624 <GFX_DrawFillRectangle>
  uint8_t i, j;
  for (i = 0; i < Display->N_Digits; i++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e023      	b.n	80009fe <SEG7_make_display+0x80>
    {
      for (j = 0; j < (8 * ((Display->N_Segments == 14)+1)); j++)		// All segments on all digits
 80009b6:	2300      	movs	r3, #0
 80009b8:	73bb      	strb	r3, [r7, #14]
 80009ba:	e013      	b.n	80009e4 <SEG7_make_display+0x66>
	{
	  if ((Display->N_Segments == 14) && j == 6)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	785b      	ldrb	r3, [r3, #1]
 80009c0:	2b0e      	cmp	r3, #14
 80009c2:	d105      	bne.n	80009d0 <SEG7_make_display+0x52>
 80009c4:	7bbb      	ldrb	r3, [r7, #14]
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d102      	bne.n	80009d0 <SEG7_make_display+0x52>
	    {
	      j++;
 80009ca:	7bbb      	ldrb	r3, [r7, #14]
 80009cc:	3301      	adds	r3, #1
 80009ce:	73bb      	strb	r3, [r7, #14]
	    }
	  SEG7_draw_segment (Display, i, j, Display->Seg_OFF_Color);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	895b      	ldrh	r3, [r3, #10]
 80009d4:	7bba      	ldrb	r2, [r7, #14]
 80009d6:	7bf9      	ldrb	r1, [r7, #15]
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f87b 	bl	8000ad4 <SEG7_draw_segment>
      for (j = 0; j < (8 * ((Display->N_Segments == 14)+1)); j++)		// All segments on all digits
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	3301      	adds	r3, #1
 80009e2:	73bb      	strb	r3, [r7, #14]
 80009e4:	7bbb      	ldrb	r3, [r7, #14]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	7852      	ldrb	r2, [r2, #1]
 80009ea:	2a0e      	cmp	r2, #14
 80009ec:	d101      	bne.n	80009f2 <SEG7_make_display+0x74>
 80009ee:	2210      	movs	r2, #16
 80009f0:	e000      	b.n	80009f4 <SEG7_make_display+0x76>
 80009f2:	2208      	movs	r2, #8
 80009f4:	429a      	cmp	r2, r3
 80009f6:	dce1      	bgt.n	80009bc <SEG7_make_display+0x3e>
  for (i = 0; i < Display->N_Digits; i++)
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	3301      	adds	r3, #1
 80009fc:	73fb      	strb	r3, [r7, #15]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	7bfa      	ldrb	r2, [r7, #15]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d3d6      	bcc.n	80009b6 <SEG7_make_display+0x38>
	}
    }

}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <SEG7_clr_display>:

void SEG7_clr_display(T7Display* Display)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b084      	sub	sp, #16
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for (i = 0; i < Display->N_Digits; i++)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	e009      	b.n	8000a34 <SEG7_clr_display+0x22>
    {
      Display->SEG7_buf[i] = 0;
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	3304      	adds	r3, #4
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	809a      	strh	r2, [r3, #4]
  for (i = 0; i < Display->N_Digits; i++)
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	3301      	adds	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	7bfa      	ldrb	r2, [r7, #15]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d3f0      	bcc.n	8000a20 <SEG7_clr_display+0xe>
    }
  SEG7_draw_display(Display);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ff84 	bl	800094c <SEG7_draw_display>
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SEG7_draw_digit>:

void SEG7_draw_digit (T7Display* Display, uint8_t digit)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
  uint16_t digit_to_draw = Display->SEG7_buf[digit];
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	889b      	ldrh	r3, [r3, #4]
 8000a64:	81bb      	strh	r3, [r7, #12]
//  uint8_t segment_to_draw;
  uint8_t i;
  for (i = 0; i < (8 * ((Display->N_Segments == 14) + 1 )); i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	73fb      	strb	r3, [r7, #15]
 8000a6a:	e023      	b.n	8000ab4 <SEG7_draw_digit+0x68>
    {
      if ((Display->N_Segments == 14) && i == 6)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	785b      	ldrb	r3, [r3, #1]
 8000a70:	2b0e      	cmp	r3, #14
 8000a72:	d105      	bne.n	8000a80 <SEG7_draw_digit+0x34>
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d102      	bne.n	8000a80 <SEG7_draw_digit+0x34>
      	    {
      	      i++;	//don't draw segment G
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
      	    }

      if (digit_to_draw & 1 << i)
 8000a80:	89ba      	ldrh	r2, [r7, #12]
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	fa42 f303 	asr.w	r3, r2, r3
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d007      	beq.n	8000aa0 <SEG7_draw_digit+0x54>
	{
	  SEG7_draw_segment (Display, digit, i, Display->Seg_ON_Color);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	891b      	ldrh	r3, [r3, #8]
 8000a94:	7bfa      	ldrb	r2, [r7, #15]
 8000a96:	78f9      	ldrb	r1, [r7, #3]
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 f81b 	bl	8000ad4 <SEG7_draw_segment>
 8000a9e:	e006      	b.n	8000aae <SEG7_draw_digit+0x62>
	}
      else
	{
	  SEG7_draw_segment (Display, digit, i, Display->Seg_OFF_Color);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	895b      	ldrh	r3, [r3, #10]
 8000aa4:	7bfa      	ldrb	r2, [r7, #15]
 8000aa6:	78f9      	ldrb	r1, [r7, #3]
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 f813 	bl	8000ad4 <SEG7_draw_segment>
  for (i = 0; i < (8 * ((Display->N_Segments == 14) + 1 )); i++)
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	73fb      	strb	r3, [r7, #15]
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	7852      	ldrb	r2, [r2, #1]
 8000aba:	2a0e      	cmp	r2, #14
 8000abc:	d101      	bne.n	8000ac2 <SEG7_draw_digit+0x76>
 8000abe:	2210      	movs	r2, #16
 8000ac0:	e000      	b.n	8000ac4 <SEG7_draw_digit+0x78>
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dcd1      	bgt.n	8000a6c <SEG7_draw_digit+0x20>
	}
    }
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <SEG7_draw_segment>:

void SEG7_draw_segment (T7Display* Display, uint8_t digit, uint8_t segment, uint16_t Color)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	4608      	mov	r0, r1
 8000ade:	4611      	mov	r1, r2
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	70fb      	strb	r3, [r7, #3]
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	70bb      	strb	r3, [r7, #2]
 8000aea:	4613      	mov	r3, r2
 8000aec:	803b      	strh	r3, [r7, #0]
  if ((digit >= Display->N_Digits) || (segment >= (8 * ((Display->N_Segments == 14) + 1 ))))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	78fa      	ldrb	r2, [r7, #3]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f080 80a6 	bcs.w	8000c46 <SEG7_draw_segment+0x172>
 8000afa:	78bb      	ldrb	r3, [r7, #2]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	7852      	ldrb	r2, [r2, #1]
 8000b00:	2a0e      	cmp	r2, #14
 8000b02:	d101      	bne.n	8000b08 <SEG7_draw_segment+0x34>
 8000b04:	2210      	movs	r2, #16
 8000b06:	e000      	b.n	8000b0a <SEG7_draw_segment+0x36>
 8000b08:	2208      	movs	r2, #8
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	f340 809b 	ble.w	8000c46 <SEG7_draw_segment+0x172>
    }
//  HAL_Delay(20);		// For tests only !!!!!!!!!!!!!!!!!!!!!!!
  uint16_t PixelHeight;
  uint8_t WidthLoops, CharBits, CharBitsLeft;

  uint8_t CharPointer = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	72bb      	strb	r3, [r7, #10]

  // 1st iteration - for each Row by Height
  for (PixelHeight = 0; PixelHeight < SEG7_param[segment][3]; PixelHeight++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	81fb      	strh	r3, [r7, #14]
 8000b18:	e087      	b.n	8000c2a <SEG7_draw_segment+0x156>
    {
      // Check how many bits left to draw in current Row
      CharBitsLeft = SEG7_param[segment][2];
 8000b1a:	78ba      	ldrb	r2, [r7, #2]
 8000b1c:	494c      	ldr	r1, [pc, #304]	; (8000c50 <SEG7_draw_segment+0x17c>)
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	3302      	adds	r3, #2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	72fb      	strb	r3, [r7, #11]

      // 2nd Iterator - For each byte in that Row
      for (WidthLoops = 0; WidthLoops <= (SEG7_param[segment][2] -1) / 8;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	737b      	strb	r3, [r7, #13]
 8000b30:	e068      	b.n	8000c04 <SEG7_draw_segment+0x130>
	  WidthLoops++)
	{
	  // Take one line
	  uint8_t line = SEG7_segments[segment][CharPointer];
 8000b32:	78ba      	ldrb	r2, [r7, #2]
 8000b34:	7ab9      	ldrb	r1, [r7, #10]
 8000b36:	4847      	ldr	r0, [pc, #284]	; (8000c54 <SEG7_draw_segment+0x180>)
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	009a      	lsls	r2, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	4403      	add	r3, r0
 8000b44:	440b      	add	r3, r1
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	727b      	strb	r3, [r7, #9]
	  // Define how many bit to draw - full byte or less
	  if (CharBitsLeft >= 8)
 8000b4a:	7afb      	ldrb	r3, [r7, #11]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	d905      	bls.n	8000b5c <SEG7_draw_segment+0x88>
	    {
	      CharBits = 8; // Full byte
 8000b50:	2308      	movs	r3, #8
 8000b52:	733b      	strb	r3, [r7, #12]
	      CharBitsLeft -= 8; // Decrease bits left counter
 8000b54:	7afb      	ldrb	r3, [r7, #11]
 8000b56:	3b08      	subs	r3, #8
 8000b58:	72fb      	strb	r3, [r7, #11]
 8000b5a:	e001      	b.n	8000b60 <SEG7_draw_segment+0x8c>
	    }
	  else
	    {
	      // If less than byte - only few bits
	      CharBits = CharBitsLeft;
 8000b5c:	7afb      	ldrb	r3, [r7, #11]
 8000b5e:	733b      	strb	r3, [r7, #12]
	    }

	  // 3rd Iterator - for each bit in current byte in current row ;)
	  for (uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8000b60:	2300      	movs	r3, #0
 8000b62:	723b      	strb	r3, [r7, #8]
 8000b64:	e044      	b.n	8000bf0 <SEG7_draw_segment+0x11c>
	    {
	      // Check bit first from left
	      if (line & 0x80)
 8000b66:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	da3a      	bge.n	8000be4 <SEG7_draw_segment+0x110>
		{
		  // If pixel exists - draw it
		  GFX_DrawPixel(
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	8899      	ldrh	r1, [r3, #4]
 8000b72:	78ba      	ldrb	r2, [r7, #2]
 8000b74:	4836      	ldr	r0, [pc, #216]	; (8000c50 <SEG7_draw_segment+0x17c>)
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4403      	add	r3, r0
 8000b7e:	3301      	adds	r3, #1
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	440b      	add	r3, r1
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	89fb      	ldrh	r3, [r7, #14]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	330a      	adds	r3, #10
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b218      	sxth	r0, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	885a      	ldrh	r2, [r3, #2]
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	0089      	lsls	r1, r1, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b299      	uxth	r1, r3
 8000baa:	78ba      	ldrb	r2, [r7, #2]
 8000bac:	4c28      	ldr	r4, [pc, #160]	; (8000c50 <SEG7_draw_segment+0x17c>)
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4423      	add	r3, r4
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	440b      	add	r3, r1
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	7b7b      	ldrb	r3, [r7, #13]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	7a3b      	ldrb	r3, [r7, #8]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	883a      	ldrh	r2, [r7, #0]
 8000bde:	4619      	mov	r1, r3
 8000be0:	f000 f941 	bl	8000e66 <ILI9341_WritePixel>
	  for (uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8000be4:	7a3b      	ldrb	r3, [r7, #8]
 8000be6:	3301      	adds	r3, #1
 8000be8:	723b      	strb	r3, [r7, #8]
 8000bea:	7a7b      	ldrb	r3, [r7, #9]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	727b      	strb	r3, [r7, #9]
 8000bf0:	7a3a      	ldrb	r2, [r7, #8]
 8000bf2:	7b3b      	ldrb	r3, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d3b6      	bcc.n	8000b66 <SEG7_draw_segment+0x92>
		      Color);
		}
	    }

	  // Take next byte in current char bitmap
	  CharPointer++;
 8000bf8:	7abb      	ldrb	r3, [r7, #10]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	72bb      	strb	r3, [r7, #10]
	  WidthLoops++)
 8000bfe:	7b7b      	ldrb	r3, [r7, #13]
 8000c00:	3301      	adds	r3, #1
 8000c02:	737b      	strb	r3, [r7, #13]
      for (WidthLoops = 0; WidthLoops <= (SEG7_param[segment][2] -1) / 8;
 8000c04:	7b79      	ldrb	r1, [r7, #13]
 8000c06:	78ba      	ldrb	r2, [r7, #2]
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <SEG7_draw_segment+0x17c>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	4403      	add	r3, r0
 8000c12:	3302      	adds	r3, #2
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da00      	bge.n	8000c1e <SEG7_draw_segment+0x14a>
 8000c1c:	3307      	adds	r3, #7
 8000c1e:	10db      	asrs	r3, r3, #3
 8000c20:	4299      	cmp	r1, r3
 8000c22:	dd86      	ble.n	8000b32 <SEG7_draw_segment+0x5e>
  for (PixelHeight = 0; PixelHeight < SEG7_param[segment][3]; PixelHeight++)
 8000c24:	89fb      	ldrh	r3, [r7, #14]
 8000c26:	3301      	adds	r3, #1
 8000c28:	81fb      	strh	r3, [r7, #14]
 8000c2a:	78ba      	ldrb	r2, [r7, #2]
 8000c2c:	4908      	ldr	r1, [pc, #32]	; (8000c50 <SEG7_draw_segment+0x17c>)
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	3303      	adds	r3, #3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	89fa      	ldrh	r2, [r7, #14]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	f4ff af6b 	bcc.w	8000b1a <SEG7_draw_segment+0x46>
 8000c44:	e000      	b.n	8000c48 <SEG7_draw_segment+0x174>
      return;
 8000c46:	bf00      	nop
	}
    }
  // Return char width for String function
//  return CurrentFont->CharDescription[CharNumber].CharWidth;

}
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08002fa4 	.word	0x08002fa4
 8000c54:	08002e14 	.word	0x08002e14

08000c58 <ILI9341_Delay>:

//
//  Basic function - write those for your MCU
//
static void ILI9341_Delay(uint32_t ms)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 fd75 	bl	8001750 <HAL_Delay>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8000c7a:	e014      	b.n	8000ca6 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <ILI9341_SendToTFT+0x5c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d10c      	bne.n	8000ca6 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <ILI9341_SendToTFT+0x5c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	330c      	adds	r3, #12
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	7812      	ldrb	r2, [r2, #0]
 8000c98:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1e7      	bne.n	8000c7c <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8000cac:	bf00      	nop
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <ILI9341_SendToTFT+0x5c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	2b80      	cmp	r3, #128	; 0x80
 8000cbc:	d0f7      	beq.n	8000cae <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	20000028 	.word	0x20000028

08000cd0 <ILI9341_SendCommand>:

static void ILI9341_SendCommand(uint8_t Command)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2140      	movs	r1, #64	; 0x40
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <ILI9341_SendCommand+0x3c>)
 8000ce0:	f000 ffc4 	bl	8001c6c <HAL_GPIO_WritePin>
#endif
	// DC to Command - DC to Low
	ILI9341_DC_LOW;
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2180      	movs	r1, #128	; 0x80
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <ILI9341_SendCommand+0x40>)
 8000cea:	f000 ffbf 	bl	8001c6c <HAL_GPIO_WritePin>

	// Send to TFT 1 byte
	ILI9341_SendToTFT(&Command, 1);
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ffbc 	bl	8000c70 <ILI9341_SendToTFT>

	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2140      	movs	r1, #64	; 0x40
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <ILI9341_SendCommand+0x3c>)
 8000cfe:	f000 ffb5 	bl	8001c6c <HAL_GPIO_WritePin>
#endif
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	40020800 	.word	0x40020800

08000d14 <ILI9341_SendCommandAndData>:

static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	73fb      	strb	r3, [r7, #15]
	// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8000d22:	2200      	movs	r2, #0
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	4810      	ldr	r0, [pc, #64]	; (8000d68 <ILI9341_SendCommandAndData+0x54>)
 8000d28:	f000 ffa0 	bl	8001c6c <HAL_GPIO_WritePin>
#endif
	// DC to Command - DC to Low
	ILI9341_DC_LOW;
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	480e      	ldr	r0, [pc, #56]	; (8000d6c <ILI9341_SendCommandAndData+0x58>)
 8000d32:	f000 ff9b 	bl	8001c6c <HAL_GPIO_WritePin>
	// Send to TFT 1 byte
	ILI9341_SendToTFT(&Command, 1);
 8000d36:	f107 030f 	add.w	r3, r7, #15
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff97 	bl	8000c70 <ILI9341_SendToTFT>

	// DC to Data - DC to High
	ILI9341_DC_HIGH;
 8000d42:	2201      	movs	r2, #1
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	4809      	ldr	r0, [pc, #36]	; (8000d6c <ILI9341_SendCommandAndData+0x58>)
 8000d48:	f000 ff90 	bl	8001c6c <HAL_GPIO_WritePin>
	// Send to TFT Length byte
	ILI9341_SendToTFT(Data, Length);
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	68b8      	ldr	r0, [r7, #8]
 8000d50:	f7ff ff8e 	bl	8000c70 <ILI9341_SendToTFT>

	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8000d54:	2201      	movs	r2, #1
 8000d56:	2140      	movs	r1, #64	; 0x40
 8000d58:	4803      	ldr	r0, [pc, #12]	; (8000d68 <ILI9341_SendCommandAndData+0x54>)
 8000d5a:	f000 ff87 	bl	8001c6c <HAL_GPIO_WritePin>
#endif
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40020800 	.word	0x40020800

08000d70 <ILI9341_SetRotation>:

//
// TFT Functions
//
void ILI9341_SetRotation(uint8_t Rotation)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d820      	bhi.n	8000dc2 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d816      	bhi.n	8000db4 <ILI9341_SetRotation+0x44>
 8000d86:	a201      	add	r2, pc, #4	; (adr r2, 8000d8c <ILI9341_SetRotation+0x1c>)
 8000d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8c:	08000d9d 	.word	0x08000d9d
 8000d90:	08000da3 	.word	0x08000da3
 8000d94:	08000da9 	.word	0x08000da9
 8000d98:	08000daf 	.word	0x08000daf
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8000d9c:	2348      	movs	r3, #72	; 0x48
 8000d9e:	71fb      	strb	r3, [r7, #7]
		break;
 8000da0:	e008      	b.n	8000db4 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8000da2:	2328      	movs	r3, #40	; 0x28
 8000da4:	71fb      	strb	r3, [r7, #7]
		break;
 8000da6:	e005      	b.n	8000db4 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8000da8:	2388      	movs	r3, #136	; 0x88
 8000daa:	71fb      	strb	r3, [r7, #7]
		break;
 8000dac:	e002      	b.n	8000db4 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000dae:	23e8      	movs	r3, #232	; 0xe8
 8000db0:	71fb      	strb	r3, [r7, #7]
		break;
 8000db2:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	2201      	movs	r2, #1
 8000db8:	4619      	mov	r1, r3
 8000dba:	2036      	movs	r0, #54	; 0x36
 8000dbc:	f7ff ffaa 	bl	8000d14 <ILI9341_SendCommandAndData>
 8000dc0:	e000      	b.n	8000dc4 <ILI9341_SetRotation+0x54>
		return;
 8000dc2:	bf00      	nop
}
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop

08000dcc <ILI9341_SetAddrWindow>:

void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4623      	mov	r3, r4
 8000ddc:	80fb      	strh	r3, [r7, #6]
 8000dde:	4603      	mov	r3, r0
 8000de0:	80bb      	strh	r3, [r7, #4]
 8000de2:	460b      	mov	r3, r1
 8000de4:	807b      	strh	r3, [r7, #2]
 8000de6:	4613      	mov	r3, r2
 8000de8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8000dea:	88fa      	ldrh	r2, [r7, #6]
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	4413      	add	r3, r2
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	3b01      	subs	r3, #1
 8000df4:	81fb      	strh	r3, [r7, #14]
 8000df6:	88ba      	ldrh	r2, [r7, #4]
 8000df8:	883b      	ldrh	r3, [r7, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8000e12:	89fb      	ldrh	r3, [r7, #14]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	2204      	movs	r2, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	202a      	movs	r0, #42	; 0x2a
 8000e2c:	f7ff ff72 	bl	8000d14 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8000e30:	88bb      	ldrh	r3, [r7, #4]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8000e40:	89bb      	ldrh	r3, [r7, #12]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8000e4a:	89bb      	ldrh	r3, [r7, #12]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	2204      	movs	r2, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	202b      	movs	r0, #43	; 0x2b
 8000e5a:	f7ff ff5b 	bl	8000d14 <ILI9341_SendCommandAndData>
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}

08000e66 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	80fb      	strh	r3, [r7, #6]
 8000e70:	460b      	mov	r3, r1
 8000e72:	80bb      	strh	r3, [r7, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT))
 8000e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db21      	blt.n	8000ec4 <ILI9341_WritePixel+0x5e>
 8000e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e84:	2bef      	cmp	r3, #239	; 0xef
 8000e86:	dc1d      	bgt.n	8000ec4 <ILI9341_WritePixel+0x5e>
 8000e88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db19      	blt.n	8000ec4 <ILI9341_WritePixel+0x5e>
 8000e90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e94:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e98:	da14      	bge.n	8000ec4 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8000e9a:	88f8      	ldrh	r0, [r7, #6]
 8000e9c:	88b9      	ldrh	r1, [r7, #4]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f7ff ff93 	bl	8000dcc <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	2202      	movs	r2, #2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	202c      	movs	r0, #44	; 0x2c
 8000ec0:	f7ff ff28 	bl	8000d14 <ILI9341_SendCommandAndData>
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <ILI9341_ClearDisplay>:
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
	}
}

void ILI9341_ClearDisplay(uint16_t Color)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8000ed6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000eda:	22f0      	movs	r2, #240	; 0xf0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff ff74 	bl	8000dcc <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendCommand(ILI9341_RAMWR);
 8000ee4:	202c      	movs	r0, #44	; 0x2c
 8000ee6:	f7ff fef3 	bl	8000cd0 <ILI9341_SendCommand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8000eea:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000eee:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2140      	movs	r1, #64	; 0x40
 8000ef4:	4820      	ldr	r0, [pc, #128]	; (8000f78 <ILI9341_ClearDisplay+0xac>)
 8000ef6:	f000 feb9 	bl	8001c6c <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8000efa:	2201      	movs	r2, #1
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	481f      	ldr	r0, [pc, #124]	; (8000f7c <ILI9341_ClearDisplay+0xb0>)
 8000f00:	f000 feb4 	bl	8001c6c <HAL_GPIO_WritePin>

    while (Length > 0U)
 8000f04:	e023      	b.n	8000f4e <ILI9341_ClearDisplay+0x82>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <ILI9341_ClearDisplay+0xb4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d11b      	bne.n	8000f4e <ILI9341_ClearDisplay+0x82>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <ILI9341_ClearDisplay+0xb4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	330c      	adds	r3, #12
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8000f28:	bf00      	nop
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <ILI9341_ClearDisplay+0xb4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d1f7      	bne.n	8000f2a <ILI9341_ClearDisplay+0x5e>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <ILI9341_ClearDisplay+0xb4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	330c      	adds	r3, #12
 8000f42:	88fa      	ldrh	r2, [r7, #6]
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1d8      	bne.n	8000f06 <ILI9341_ClearDisplay+0x3a>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8000f54:	bf00      	nop
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <ILI9341_ClearDisplay+0xb4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f62:	2b80      	cmp	r3, #128	; 0x80
 8000f64:	d0f7      	beq.n	8000f56 <ILI9341_ClearDisplay+0x8a>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8000f66:	2201      	movs	r2, #1
 8000f68:	2140      	movs	r1, #64	; 0x40
 8000f6a:	4803      	ldr	r0, [pc, #12]	; (8000f78 <ILI9341_ClearDisplay+0xac>)
 8000f6c:	f000 fe7e 	bl	8001c6c <HAL_GPIO_WritePin>
	{
		// Send Color bytes
		ILI9341_SendData16(Color);
	}
#endif
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	20000028 	.word	0x20000028

08000f84 <ILI9341_Init>:
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};

void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8000f8c:	4a25      	ldr	r2, [pc, #148]	; (8001024 <ILI9341_Init+0xa0>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]

    uint8_t cmd, x, numArgs;
    const uint8_t *addr = initcmd;
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <ILI9341_Init+0xa4>)
 8000f94:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
    __HAL_SPI_ENABLE(Tft_hspi);
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <ILI9341_Init+0xa0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <ILI9341_Init+0xa0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fa8:	601a      	str	r2, [r3, #0]
#endif

#if (ILI9341_USE_HW_RESET == 1)
	ILI9341_RST_LOW;
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb0:	481e      	ldr	r0, [pc, #120]	; (800102c <ILI9341_Init+0xa8>)
 8000fb2:	f000 fe5b 	bl	8001c6c <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f7ff fe4e 	bl	8000c58 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc2:	481a      	ldr	r0, [pc, #104]	; (800102c <ILI9341_Init+0xa8>)
 8000fc4:	f000 fe52 	bl	8001c6c <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8000fc8:	200a      	movs	r0, #10
 8000fca:	f7ff fe45 	bl	8000c58 <ILI9341_Delay>
#else
	ILI9341_SendCommand(ILI9341_SWRESET); // Engage software reset
    ILI9341_Delay(150);
#endif

    while ((cmd = *(addr++)) > 0)
 8000fce:	e019      	b.n	8001004 <ILI9341_Init+0x80>
    {
      x = *(addr++);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	60fa      	str	r2, [r7, #12]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	72bb      	strb	r3, [r7, #10]
      numArgs = x & 0x7F;
 8000fda:	7abb      	ldrb	r3, [r7, #10]
 8000fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fe0:	727b      	strb	r3, [r7, #9]
      // Push Init data
      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 8000fe2:	7a7a      	ldrb	r2, [r7, #9]
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fe93 	bl	8000d14 <ILI9341_SendCommandAndData>

      addr += numArgs;
 8000fee:	7a7b      	ldrb	r3, [r7, #9]
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]

      if (x & 0x80)
 8000ff6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da02      	bge.n	8001004 <ILI9341_Init+0x80>
      {
    	  ILI9341_Delay(150);
 8000ffe:	2096      	movs	r0, #150	; 0x96
 8001000:	f7ff fe2a 	bl	8000c58 <ILI9341_Delay>
    while ((cmd = *(addr++)) > 0)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60fa      	str	r2, [r7, #12]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	72fb      	strb	r3, [r7, #11]
 800100e:	7afb      	ldrb	r3, [r7, #11]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1dd      	bne.n	8000fd0 <ILI9341_Init+0x4c>
      }
    }

    // Set selected Rotation
    ILI9341_SetRotation(ILI9341_ROTATION);
 8001014:	2002      	movs	r0, #2
 8001016:	f7ff feab 	bl	8000d70 <ILI9341_SetRotation>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000028 	.word	0x20000028
 8001028:	08002ff4 	.word	0x08002ff4
 800102c:	40020000 	.word	0x40020000

08001030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b41      	ldr	r3, [pc, #260]	; (8001150 <MX_GPIO_Init+0x120>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a40      	ldr	r2, [pc, #256]	; (8001150 <MX_GPIO_Init+0x120>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <MX_GPIO_Init+0x120>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <MX_GPIO_Init+0x120>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a39      	ldr	r2, [pc, #228]	; (8001150 <MX_GPIO_Init+0x120>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b37      	ldr	r3, [pc, #220]	; (8001150 <MX_GPIO_Init+0x120>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b33      	ldr	r3, [pc, #204]	; (8001150 <MX_GPIO_Init+0x120>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a32      	ldr	r2, [pc, #200]	; (8001150 <MX_GPIO_Init+0x120>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <MX_GPIO_Init+0x120>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <MX_GPIO_Init+0x120>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a2b      	ldr	r2, [pc, #172]	; (8001150 <MX_GPIO_Init+0x120>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <MX_GPIO_Init+0x120>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	4826      	ldr	r0, [pc, #152]	; (8001154 <MX_GPIO_Init+0x124>)
 80010bc:	f000 fdd6 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c6:	4824      	ldr	r0, [pc, #144]	; (8001158 <MX_GPIO_Init+0x128>)
 80010c8:	f000 fdd0 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	4822      	ldr	r0, [pc, #136]	; (800115c <MX_GPIO_Init+0x12c>)
 80010d2:	f000 fdcb 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4819      	ldr	r0, [pc, #100]	; (8001154 <MX_GPIO_Init+0x124>)
 80010ee:	f000 fc39 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin;
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_DC_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4812      	ldr	r0, [pc, #72]	; (8001154 <MX_GPIO_Init+0x124>)
 800110a:	f000 fc2b 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 800110e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	480c      	ldr	r0, [pc, #48]	; (8001158 <MX_GPIO_Init+0x128>)
 8001128:	f000 fc1c 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin;
 800112c:	2340      	movs	r3, #64	; 0x40
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_CS_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_GPIO_Init+0x12c>)
 8001144:	f000 fc0e 	bl	8001964 <HAL_GPIO_Init>

}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	40020800 	.word	0x40020800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b096      	sub	sp, #88	; 0x58
 8001164:	af04      	add	r7, sp, #16
    /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f000 fa81 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f000 f887 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116e:	f7ff ff5f 	bl	8001030 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001172:	f000 f8f5 	bl	8001360 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001176:	f000 f9dd 	bl	8001534 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init(&hspi1);
 800117a:	483e      	ldr	r0, [pc, #248]	; (8001274 <main+0x114>)
 800117c:	f7ff ff02 	bl	8000f84 <ILI9341_Init>

  ILI9341_ClearDisplay(ILI9341_MAGENTA);
 8001180:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001184:	f7ff fea2 	bl	8000ecc <ILI9341_ClearDisplay>
  T7Display LED8;
  DisplayInit(&LED8, 8, 14, 0, 50, ILI9341_BLACK, ILI9341_GREEN, GRAPHITE);
 8001188:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800118c:	f641 03e3 	movw	r3, #6371	; 0x18e3
 8001190:	9303      	str	r3, [sp, #12]
 8001192:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2300      	movs	r3, #0
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	2332      	movs	r3, #50	; 0x32
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2300      	movs	r3, #0
 80011a2:	220e      	movs	r2, #14
 80011a4:	2108      	movs	r1, #8
 80011a6:	f7ff fa5f 	bl	8000668 <DisplayInit>
  T7Display LED4;
  DisplayInit(&LED4, 4, 7, 80, 150, ILI9341_NAVY, ILI9341_YELLOW, GRAPHITE);
 80011aa:	f107 000c 	add.w	r0, r7, #12
 80011ae:	f641 03e3 	movw	r3, #6371	; 0x18e3
 80011b2:	9303      	str	r3, [sp, #12]
 80011b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	230f      	movs	r3, #15
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	2396      	movs	r3, #150	; 0x96
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2350      	movs	r3, #80	; 0x50
 80011c4:	2207      	movs	r2, #7
 80011c6:	2104      	movs	r1, #4
 80011c8:	f7ff fa4e 	bl	8000668 <DisplayInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uint8_t i;
      char message[] =
 80011cc:	4a2a      	ldr	r2, [pc, #168]	; (8001278 <main+0x118>)
 80011ce:	463b      	mov	r3, r7
 80011d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d2:	c303      	stmia	r3!, {r0, r1}
 80011d4:	801a      	strh	r2, [r3, #0]
	  {"Kurs STM."};
//	{ 0x75, 0x1c, 0x50, 0x6d, 0x00, 0x6d, 0x31, 0x37 };
      SEG7_print_ASCII(&LED8, 0, message);
 80011d6:	463a      	mov	r2, r7
 80011d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fae6 	bl	80007b0 <SEG7_print_ASCII>
//	{
//	  uint8_t segments = message[i];
//	  uint8_t digit = i;
//	  SEG7_write_display (&LED8, digit, segments);
//	}
      SEG7_draw_display (&LED8);
 80011e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fbaf 	bl	800094c <SEG7_draw_display>
      HAL_Delay (5000);
 80011ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80011f2:	f000 faad 	bl	8001750 <HAL_Delay>

      for (i = 4; i < 19; i++)
 80011f6:	2304      	movs	r3, #4
 80011f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80011fc:	e02a      	b.n	8001254 <main+0xf4>
	{
	  DisplaySetColor (&LED8, i);
 80011fe:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fa57 	bl	80006bc <DisplaySetColor>
	  SEG7_print_display (&LED8, i);
 800120e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fa6f 	bl	80006fc <SEG7_print_display>
	  SEG7_draw_display (&LED8);
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fb92 	bl	800094c <SEG7_draw_display>

	  SEG7_HEX_display (&LED4, DisplayGetColor (&LED8));
 8001228:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fa59 	bl	80006e4 <DisplayGetColor>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fb2f 	bl	80008a0 <SEG7_HEX_display>
	  HAL_Delay (1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001246:	f000 fa83 	bl	8001750 <HAL_Delay>
      for (i = 4; i < 19; i++)
 800124a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800124e:	3301      	adds	r3, #1
 8001250:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001254:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001258:	2b12      	cmp	r3, #18
 800125a:	d9d0      	bls.n	80011fe <main+0x9e>
	}
      DisplaySetColor (&LED8, 14);
 800125c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001260:	210e      	movs	r1, #14
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fa2a 	bl	80006bc <DisplaySetColor>
      SEG7_clr_display(&LED4);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fbd0 	bl	8000a12 <SEG7_clr_display>
  {
 8001272:	e7ab      	b.n	80011cc <main+0x6c>
 8001274:	2000002c 	.word	0x2000002c
 8001278:	08002cd4 	.word	0x08002cd4

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	; 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	; 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fd0e 	bl	8002cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <SystemClock_Config+0xcc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <SystemClock_Config+0xcc>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <SystemClock_Config+0xcc>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a21      	ldr	r2, [pc, #132]	; (800134c <SystemClock_Config+0xd0>)
 80012c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <SystemClock_Config+0xd0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2310      	movs	r3, #16
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e4:	2302      	movs	r3, #2
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012ec:	2310      	movs	r3, #16
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012f6:	2304      	movs	r3, #4
 80012f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012fa:	2304      	movs	r3, #4
 80012fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fccc 	bl	8001ca0 <HAL_RCC_OscConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800130e:	f000 f81f 	bl	8001350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001312:	230f      	movs	r3, #15
 8001314:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001316:	2302      	movs	r3, #2
 8001318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001322:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2102      	movs	r1, #2
 800132e:	4618      	mov	r0, r3
 8001330:	f000 ff2e 	bl	8002190 <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800133a:	f000 f809 	bl	8001350 <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3750      	adds	r7, #80	; 0x50
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_SPI1_Init+0x64>)
 8001366:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <MX_SPI1_Init+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_SPI1_Init+0x64>)
 800136c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001370:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_SPI1_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_SPI1_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_SPI1_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_SPI1_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_SPI1_Init+0x64>)
 800138c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001390:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_SPI1_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <MX_SPI1_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_SPI1_Init+0x64>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <MX_SPI1_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_SPI1_Init+0x64>)
 80013ac:	220a      	movs	r2, #10
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <MX_SPI1_Init+0x64>)
 80013b2:	f001 f90d 	bl	80025d0 <HAL_SPI_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013bc:	f7ff ffc8 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000002c 	.word	0x2000002c
 80013c8:	40013000 	.word	0x40013000

080013cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a19      	ldr	r2, [pc, #100]	; (8001450 <HAL_SPI_MspInit+0x84>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12b      	bne.n	8001446 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_SPI_MspInit+0x88>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a17      	ldr	r2, [pc, #92]	; (8001454 <HAL_SPI_MspInit+0x88>)
 80013f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_SPI_MspInit+0x88>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_SPI_MspInit+0x88>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <HAL_SPI_MspInit+0x88>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_SPI_MspInit+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001426:	23e0      	movs	r3, #224	; 0xe0
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001436:	2305      	movs	r3, #5
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <HAL_SPI_MspInit+0x8c>)
 8001442:	f000 fa8f 	bl	8001964 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	; 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40013000 	.word	0x40013000
 8001454:	40023800 	.word	0x40023800
 8001458:	40020000 	.word	0x40020000

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <HAL_MspInit+0x4c>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_MspInit+0x4c>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800149a:	2007      	movs	r0, #7
 800149c:	f000 fa2e 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 f906 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <SystemInit+0x28>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <SystemInit+0x28>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SystemInit+0x28>)
 800151e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001522:	609a      	str	r2, [r3, #8]
#endif
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <MX_USART2_UART_Init+0x50>)
 800153c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 800156c:	f001 f8b9 	bl	80026e2 <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001576:	f7ff feeb 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000084 	.word	0x20000084
 8001584:	40004400 	.word	0x40004400

08001588 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_UART_MspInit+0x84>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d12b      	bne.n	8001602 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_UART_MspInit+0x88>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a17      	ldr	r2, [pc, #92]	; (8001610 <HAL_UART_MspInit+0x88>)
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_UART_MspInit+0x88>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_UART_MspInit+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_UART_MspInit+0x88>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_UART_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015e2:	230c      	movs	r3, #12
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f2:	2307      	movs	r3, #7
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_UART_MspInit+0x8c>)
 80015fe:	f000 f9b1 	bl	8001964 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40004400 	.word	0x40004400
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800161c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800161e:	e003      	b.n	8001628 <LoopCopyDataInit>

08001620 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001622:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001624:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001626:	3104      	adds	r1, #4

08001628 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800162c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800162e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001630:	d3f6      	bcc.n	8001620 <CopyDataInit>
  ldr  r2, =_sbss
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001634:	e002      	b.n	800163c <LoopFillZerobss>

08001636 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001636:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001638:	f842 3b04 	str.w	r3, [r2], #4

0800163c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800163e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001640:	d3f9      	bcc.n	8001636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001642:	f7ff ff61 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001646:	f001 fb0d 	bl	8002c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff fd89 	bl	8001160 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001650:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001654:	0800308c 	.word	0x0800308c
  ldr  r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800165c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001660:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001664:	200000cc 	.word	0x200000cc

08001668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <HAL_Init+0x40>)
 8001676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_Init+0x40>)
 8001682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_Init+0x40>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f000 f931 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	2000      	movs	r0, #0
 800169c:	f000 f808 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fedc 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f93b 	bl	800194a <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f000 f911 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000008 	.word	0x20000008
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008
 8001734:	200000c8 	.word	0x200000c8

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200000c8 	.word	0x200000c8

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff8e 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff47 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff5c 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff8e 	bl	8001850 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5d 	bl	80017fc <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffb0 	bl	80018b8 <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e159      	b.n	8001c34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 8148 	bne.w	8001c2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d005      	beq.n	80019b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d130      	bne.n	8001a18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 0201 	and.w	r2, r3, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d017      	beq.n	8001a54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d123      	bne.n	8001aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	08da      	lsrs	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3208      	adds	r2, #8
 8001a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a2 	beq.w	8001c2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <HAL_GPIO_Init+0x2e8>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a56      	ldr	r2, [pc, #344]	; (8001c4c <HAL_GPIO_Init+0x2e8>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <HAL_GPIO_Init+0x2e8>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b06:	4a52      	ldr	r2, [pc, #328]	; (8001c50 <HAL_GPIO_Init+0x2ec>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a49      	ldr	r2, [pc, #292]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d019      	beq.n	8001b66 <HAL_GPIO_Init+0x202>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a48      	ldr	r2, [pc, #288]	; (8001c58 <HAL_GPIO_Init+0x2f4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_GPIO_Init+0x1fe>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a47      	ldr	r2, [pc, #284]	; (8001c5c <HAL_GPIO_Init+0x2f8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00d      	beq.n	8001b5e <HAL_GPIO_Init+0x1fa>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a46      	ldr	r2, [pc, #280]	; (8001c60 <HAL_GPIO_Init+0x2fc>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d007      	beq.n	8001b5a <HAL_GPIO_Init+0x1f6>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a45      	ldr	r2, [pc, #276]	; (8001c64 <HAL_GPIO_Init+0x300>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_GPIO_Init+0x1f2>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e008      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b56:	2307      	movs	r3, #7
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e004      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b66:	2300      	movs	r3, #0
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	f002 0203 	and.w	r2, r2, #3
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4093      	lsls	r3, r2
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b78:	4935      	ldr	r1, [pc, #212]	; (8001c50 <HAL_GPIO_Init+0x2ec>)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b86:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001baa:	4a2f      	ldr	r2, [pc, #188]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd4:	4a24      	ldr	r2, [pc, #144]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bfe:	4a1a      	ldr	r2, [pc, #104]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c28:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3301      	adds	r3, #1
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2b0f      	cmp	r3, #15
 8001c38:	f67f aea2 	bls.w	8001980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40013800 	.word	0x40013800
 8001c54:	40020000 	.word	0x40020000
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	40020800 	.word	0x40020800
 8001c60:	40020c00 	.word	0x40020c00
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40013c00 	.word	0x40013c00

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c88:	e003      	b.n	8001c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	619a      	str	r2, [r3, #24]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e267      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d075      	beq.n	8001daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cbe:	4b88      	ldr	r3, [pc, #544]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d00c      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cca:	4b85      	ldr	r3, [pc, #532]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d112      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd6:	4b82      	ldr	r3, [pc, #520]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ce2:	d10b      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	4b7e      	ldr	r3, [pc, #504]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d05b      	beq.n	8001da8 <HAL_RCC_OscConfig+0x108>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d157      	bne.n	8001da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e242      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d04:	d106      	bne.n	8001d14 <HAL_RCC_OscConfig+0x74>
 8001d06:	4b76      	ldr	r3, [pc, #472]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a75      	ldr	r2, [pc, #468]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e01d      	b.n	8001d50 <HAL_RCC_OscConfig+0xb0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x98>
 8001d1e:	4b70      	ldr	r3, [pc, #448]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6f      	ldr	r2, [pc, #444]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b6d      	ldr	r3, [pc, #436]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a6c      	ldr	r2, [pc, #432]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e00b      	b.n	8001d50 <HAL_RCC_OscConfig+0xb0>
 8001d38:	4b69      	ldr	r3, [pc, #420]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a68      	ldr	r2, [pc, #416]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b66      	ldr	r3, [pc, #408]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a65      	ldr	r2, [pc, #404]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fcee 	bl	8001738 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff fcea 	bl	8001738 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e207      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	4b5b      	ldr	r3, [pc, #364]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0xc0>
 8001d7e:	e014      	b.n	8001daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fcda 	bl	8001738 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff fcd6 	bl	8001738 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e1f3      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	4b51      	ldr	r3, [pc, #324]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0xe8>
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d063      	beq.n	8001e7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001db6:	4b4a      	ldr	r3, [pc, #296]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc2:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d11c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dce:	4b44      	ldr	r3, [pc, #272]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d116      	bne.n	8001e08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x152>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e1c7      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4937      	ldr	r1, [pc, #220]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	e03a      	b.n	8001e7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e10:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <HAL_RCC_OscConfig+0x244>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7ff fc8f 	bl	8001738 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fc8b 	bl	8001738 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1a8      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e30:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4925      	ldr	r1, [pc, #148]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	e015      	b.n	8001e7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_RCC_OscConfig+0x244>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff fc6e 	bl	8001738 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e60:	f7ff fc6a 	bl	8001738 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e187      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d036      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d016      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_RCC_OscConfig+0x248>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff fc4e 	bl	8001738 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fc4a 	bl	8001738 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e167      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x200>
 8001ebe:	e01b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_OscConfig+0x248>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7ff fc37 	bl	8001738 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ecc:	e00e      	b.n	8001eec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ece:	f7ff fc33 	bl	8001738 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d907      	bls.n	8001eec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e150      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	42470000 	.word	0x42470000
 8001ee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eec:	4b88      	ldr	r3, [pc, #544]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ea      	bne.n	8001ece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 8097 	beq.w	8002034 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0a:	4b81      	ldr	r3, [pc, #516]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10f      	bne.n	8001f36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b7d      	ldr	r3, [pc, #500]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a7c      	ldr	r2, [pc, #496]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b7a      	ldr	r3, [pc, #488]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f36:	4b77      	ldr	r3, [pc, #476]	; (8002114 <HAL_RCC_OscConfig+0x474>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d118      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f42:	4b74      	ldr	r3, [pc, #464]	; (8002114 <HAL_RCC_OscConfig+0x474>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a73      	ldr	r2, [pc, #460]	; (8002114 <HAL_RCC_OscConfig+0x474>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fbf3 	bl	8001738 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f56:	f7ff fbef 	bl	8001738 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e10c      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x474>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x2ea>
 8001f7c:	4b64      	ldr	r3, [pc, #400]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	4a63      	ldr	r2, [pc, #396]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6713      	str	r3, [r2, #112]	; 0x70
 8001f88:	e01c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x324>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x30c>
 8001f92:	4b5f      	ldr	r3, [pc, #380]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	4a5e      	ldr	r2, [pc, #376]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9e:	4b5c      	ldr	r3, [pc, #368]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa2:	4a5b      	ldr	r2, [pc, #364]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x324>
 8001fac:	4b58      	ldr	r3, [pc, #352]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	4a57      	ldr	r2, [pc, #348]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb8:	4b55      	ldr	r3, [pc, #340]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	4a54      	ldr	r2, [pc, #336]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d015      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fcc:	f7ff fbb4 	bl	8001738 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd4:	f7ff fbb0 	bl	8001738 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e0cb      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fea:	4b49      	ldr	r3, [pc, #292]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0ee      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x334>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7ff fb9e 	bl	8001738 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7ff fb9a 	bl	8001738 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	; 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0b5      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002016:	4b3e      	ldr	r3, [pc, #248]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1ee      	bne.n	8002000 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002022:	7dfb      	ldrb	r3, [r7, #23]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d105      	bne.n	8002034 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002028:	4b39      	ldr	r3, [pc, #228]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	4a38      	ldr	r2, [pc, #224]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 800202e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80a1 	beq.w	8002180 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203e:	4b34      	ldr	r3, [pc, #208]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b08      	cmp	r3, #8
 8002048:	d05c      	beq.n	8002104 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d141      	bne.n	80020d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_RCC_OscConfig+0x478>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fb6e 	bl	8001738 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff fb6a 	bl	8001738 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e087      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	4b27      	ldr	r3, [pc, #156]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	061b      	lsls	r3, r3, #24
 80020a2:	491b      	ldr	r1, [pc, #108]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a8:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_RCC_OscConfig+0x478>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7ff fb43 	bl	8001738 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b6:	f7ff fb3f 	bl	8001738 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e05c      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x416>
 80020d4:	e054      	b.n	8002180 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_RCC_OscConfig+0x478>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7ff fb2c 	bl	8001738 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e4:	f7ff fb28 	bl	8001738 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e045      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_RCC_OscConfig+0x470>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x444>
 8002102:	e03d      	b.n	8002180 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d107      	bne.n	800211c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e038      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
 8002110:	40023800 	.word	0x40023800
 8002114:	40007000 	.word	0x40007000
 8002118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_RCC_OscConfig+0x4ec>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d028      	beq.n	800217c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002134:	429a      	cmp	r2, r3
 8002136:	d121      	bne.n	800217c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d11a      	bne.n	800217c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002154:	4293      	cmp	r3, r2
 8002156:	d111      	bne.n	800217c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	085b      	lsrs	r3, r3, #1
 8002164:	3b01      	subs	r3, #1
 8002166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d107      	bne.n	800217c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800

08002190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0cc      	b.n	800233e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a4:	4b68      	ldr	r3, [pc, #416]	; (8002348 <HAL_RCC_ClockConfig+0x1b8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d90c      	bls.n	80021cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b65      	ldr	r3, [pc, #404]	; (8002348 <HAL_RCC_ClockConfig+0x1b8>)
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b63      	ldr	r3, [pc, #396]	; (8002348 <HAL_RCC_ClockConfig+0x1b8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0b8      	b.n	800233e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a58      	ldr	r2, [pc, #352]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021fc:	4b53      	ldr	r3, [pc, #332]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4a52      	ldr	r2, [pc, #328]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002208:	4b50      	ldr	r3, [pc, #320]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	494d      	ldr	r1, [pc, #308]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d044      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d119      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e07f      	b.n	800233e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d003      	beq.n	800224e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800224a:	2b03      	cmp	r3, #3
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224e:	4b3f      	ldr	r3, [pc, #252]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e06f      	b.n	800233e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225e:	4b3b      	ldr	r3, [pc, #236]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e067      	b.n	800233e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226e:	4b37      	ldr	r3, [pc, #220]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f023 0203 	bic.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4934      	ldr	r1, [pc, #208]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	4313      	orrs	r3, r2
 800227e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002280:	f7ff fa5a 	bl	8001738 <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	e00a      	b.n	800229e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002288:	f7ff fa56 	bl	8001738 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e04f      	b.n	800233e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	4b2b      	ldr	r3, [pc, #172]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 020c 	and.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d1eb      	bne.n	8002288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b0:	4b25      	ldr	r3, [pc, #148]	; (8002348 <HAL_RCC_ClockConfig+0x1b8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d20c      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <HAL_RCC_ClockConfig+0x1b8>)
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_RCC_ClockConfig+0x1b8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e032      	b.n	800233e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e4:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4916      	ldr	r1, [pc, #88]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	490e      	ldr	r1, [pc, #56]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002316:	f000 f821 	bl	800235c <HAL_RCC_GetSysClockFreq>
 800231a:	4602      	mov	r2, r0
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	490a      	ldr	r1, [pc, #40]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	5ccb      	ldrb	r3, [r1, r3]
 800232a:	fa22 f303 	lsr.w	r3, r2, r3
 800232e:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f9ba 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023c00 	.word	0x40023c00
 800234c:	40023800 	.word	0x40023800
 8002350:	08003064 	.word	0x08003064
 8002354:	20000000 	.word	0x20000000
 8002358:	20000004 	.word	0x20000004

0800235c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800235c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002360:	b094      	sub	sp, #80	; 0x50
 8002362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	647b      	str	r3, [r7, #68]	; 0x44
 8002368:	2300      	movs	r3, #0
 800236a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800236c:	2300      	movs	r3, #0
 800236e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002374:	4b79      	ldr	r3, [pc, #484]	; (800255c <HAL_RCC_GetSysClockFreq+0x200>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b08      	cmp	r3, #8
 800237e:	d00d      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x40>
 8002380:	2b08      	cmp	r3, #8
 8002382:	f200 80e1 	bhi.w	8002548 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x34>
 800238a:	2b04      	cmp	r3, #4
 800238c:	d003      	beq.n	8002396 <HAL_RCC_GetSysClockFreq+0x3a>
 800238e:	e0db      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002390:	4b73      	ldr	r3, [pc, #460]	; (8002560 <HAL_RCC_GetSysClockFreq+0x204>)
 8002392:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002394:	e0db      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002396:	4b73      	ldr	r3, [pc, #460]	; (8002564 <HAL_RCC_GetSysClockFreq+0x208>)
 8002398:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800239a:	e0d8      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800239c:	4b6f      	ldr	r3, [pc, #444]	; (800255c <HAL_RCC_GetSysClockFreq+0x200>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023a6:	4b6d      	ldr	r3, [pc, #436]	; (800255c <HAL_RCC_GetSysClockFreq+0x200>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d063      	beq.n	800247a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b2:	4b6a      	ldr	r3, [pc, #424]	; (800255c <HAL_RCC_GetSysClockFreq+0x200>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	099b      	lsrs	r3, r3, #6
 80023b8:	2200      	movs	r2, #0
 80023ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80023bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c4:	633b      	str	r3, [r7, #48]	; 0x30
 80023c6:	2300      	movs	r3, #0
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
 80023ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023ce:	4622      	mov	r2, r4
 80023d0:	462b      	mov	r3, r5
 80023d2:	f04f 0000 	mov.w	r0, #0
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	0159      	lsls	r1, r3, #5
 80023dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e0:	0150      	lsls	r0, r2, #5
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4621      	mov	r1, r4
 80023e8:	1a51      	subs	r1, r2, r1
 80023ea:	6139      	str	r1, [r7, #16]
 80023ec:	4629      	mov	r1, r5
 80023ee:	eb63 0301 	sbc.w	r3, r3, r1
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002400:	4659      	mov	r1, fp
 8002402:	018b      	lsls	r3, r1, #6
 8002404:	4651      	mov	r1, sl
 8002406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800240a:	4651      	mov	r1, sl
 800240c:	018a      	lsls	r2, r1, #6
 800240e:	4651      	mov	r1, sl
 8002410:	ebb2 0801 	subs.w	r8, r2, r1
 8002414:	4659      	mov	r1, fp
 8002416:	eb63 0901 	sbc.w	r9, r3, r1
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800242a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800242e:	4690      	mov	r8, r2
 8002430:	4699      	mov	r9, r3
 8002432:	4623      	mov	r3, r4
 8002434:	eb18 0303 	adds.w	r3, r8, r3
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	462b      	mov	r3, r5
 800243c:	eb49 0303 	adc.w	r3, r9, r3
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800244e:	4629      	mov	r1, r5
 8002450:	024b      	lsls	r3, r1, #9
 8002452:	4621      	mov	r1, r4
 8002454:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002458:	4621      	mov	r1, r4
 800245a:	024a      	lsls	r2, r1, #9
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002462:	2200      	movs	r2, #0
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
 8002466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800246c:	f7fd feb4 	bl	80001d8 <__aeabi_uldivmod>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4613      	mov	r3, r2
 8002476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002478:	e058      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <HAL_RCC_GetSysClockFreq+0x200>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	099b      	lsrs	r3, r3, #6
 8002480:	2200      	movs	r2, #0
 8002482:	4618      	mov	r0, r3
 8002484:	4611      	mov	r1, r2
 8002486:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	2300      	movs	r3, #0
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
 8002490:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002494:	4642      	mov	r2, r8
 8002496:	464b      	mov	r3, r9
 8002498:	f04f 0000 	mov.w	r0, #0
 800249c:	f04f 0100 	mov.w	r1, #0
 80024a0:	0159      	lsls	r1, r3, #5
 80024a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a6:	0150      	lsls	r0, r2, #5
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4641      	mov	r1, r8
 80024ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80024b2:	4649      	mov	r1, r9
 80024b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024cc:	ebb2 040a 	subs.w	r4, r2, sl
 80024d0:	eb63 050b 	sbc.w	r5, r3, fp
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	00eb      	lsls	r3, r5, #3
 80024de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024e2:	00e2      	lsls	r2, r4, #3
 80024e4:	4614      	mov	r4, r2
 80024e6:	461d      	mov	r5, r3
 80024e8:	4643      	mov	r3, r8
 80024ea:	18e3      	adds	r3, r4, r3
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	464b      	mov	r3, r9
 80024f0:	eb45 0303 	adc.w	r3, r5, r3
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002502:	4629      	mov	r1, r5
 8002504:	028b      	lsls	r3, r1, #10
 8002506:	4621      	mov	r1, r4
 8002508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800250c:	4621      	mov	r1, r4
 800250e:	028a      	lsls	r2, r1, #10
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002516:	2200      	movs	r2, #0
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	61fa      	str	r2, [r7, #28]
 800251c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002520:	f7fd fe5a 	bl	80001d8 <__aeabi_uldivmod>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4613      	mov	r3, r2
 800252a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_GetSysClockFreq+0x200>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800253c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800253e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002546:	e002      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCC_GetSysClockFreq+0x204>)
 800254a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800254c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002550:	4618      	mov	r0, r3
 8002552:	3750      	adds	r7, #80	; 0x50
 8002554:	46bd      	mov	sp, r7
 8002556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	00f42400 	.word	0x00f42400
 8002564:	007a1200 	.word	0x007a1200

08002568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_RCC_GetHCLKFreq+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000000 	.word	0x20000000

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002584:	f7ff fff0 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	0a9b      	lsrs	r3, r3, #10
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4903      	ldr	r1, [pc, #12]	; (80025a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40023800 	.word	0x40023800
 80025a4:	08003074 	.word	0x08003074

080025a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025ac:	f7ff ffdc 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	0b5b      	lsrs	r3, r3, #13
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4903      	ldr	r1, [pc, #12]	; (80025cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	08003074 	.word	0x08003074

080025d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07b      	b.n	80026da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d108      	bne.n	80025fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025f2:	d009      	beq.n	8002608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
 80025fa:	e005      	b.n	8002608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fed2 	bl	80013cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800263e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268c:	ea42 0103 	orr.w	r1, r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	f003 0104 	and.w	r1, r3, #4
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	f003 0210 	and.w	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e03f      	b.n	8002774 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7fe ff3d 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2224      	movs	r2, #36	; 0x24
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002724:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f828 	bl	800277c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800273a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800274a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800275a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800277c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002780:	b0c0      	sub	sp, #256	; 0x100
 8002782:	af00      	add	r7, sp, #0
 8002784:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002798:	68d9      	ldr	r1, [r3, #12]
 800279a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	ea40 0301 	orr.w	r3, r0, r1
 80027a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027d4:	f021 010c 	bic.w	r1, r1, #12
 80027d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027e2:	430b      	orrs	r3, r1
 80027e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f6:	6999      	ldr	r1, [r3, #24]
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	ea40 0301 	orr.w	r3, r0, r1
 8002802:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b8f      	ldr	r3, [pc, #572]	; (8002a48 <UART_SetConfig+0x2cc>)
 800280c:	429a      	cmp	r2, r3
 800280e:	d005      	beq.n	800281c <UART_SetConfig+0xa0>
 8002810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4b8d      	ldr	r3, [pc, #564]	; (8002a4c <UART_SetConfig+0x2d0>)
 8002818:	429a      	cmp	r2, r3
 800281a:	d104      	bne.n	8002826 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800281c:	f7ff fec4 	bl	80025a8 <HAL_RCC_GetPCLK2Freq>
 8002820:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002824:	e003      	b.n	800282e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002826:	f7ff feab 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 800282a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800282e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002838:	f040 810c 	bne.w	8002a54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800283c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002840:	2200      	movs	r2, #0
 8002842:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002846:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800284a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800284e:	4622      	mov	r2, r4
 8002850:	462b      	mov	r3, r5
 8002852:	1891      	adds	r1, r2, r2
 8002854:	65b9      	str	r1, [r7, #88]	; 0x58
 8002856:	415b      	adcs	r3, r3
 8002858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800285a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800285e:	4621      	mov	r1, r4
 8002860:	eb12 0801 	adds.w	r8, r2, r1
 8002864:	4629      	mov	r1, r5
 8002866:	eb43 0901 	adc.w	r9, r3, r1
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800287a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800287e:	4690      	mov	r8, r2
 8002880:	4699      	mov	r9, r3
 8002882:	4623      	mov	r3, r4
 8002884:	eb18 0303 	adds.w	r3, r8, r3
 8002888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800288c:	462b      	mov	r3, r5
 800288e:	eb49 0303 	adc.w	r3, r9, r3
 8002892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028aa:	460b      	mov	r3, r1
 80028ac:	18db      	adds	r3, r3, r3
 80028ae:	653b      	str	r3, [r7, #80]	; 0x50
 80028b0:	4613      	mov	r3, r2
 80028b2:	eb42 0303 	adc.w	r3, r2, r3
 80028b6:	657b      	str	r3, [r7, #84]	; 0x54
 80028b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028c0:	f7fd fc8a 	bl	80001d8 <__aeabi_uldivmod>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <UART_SetConfig+0x2d4>)
 80028ca:	fba3 2302 	umull	r2, r3, r3, r2
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	011c      	lsls	r4, r3, #4
 80028d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028e4:	4642      	mov	r2, r8
 80028e6:	464b      	mov	r3, r9
 80028e8:	1891      	adds	r1, r2, r2
 80028ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80028ec:	415b      	adcs	r3, r3
 80028ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028f4:	4641      	mov	r1, r8
 80028f6:	eb12 0a01 	adds.w	sl, r2, r1
 80028fa:	4649      	mov	r1, r9
 80028fc:	eb43 0b01 	adc.w	fp, r3, r1
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800290c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002914:	4692      	mov	sl, r2
 8002916:	469b      	mov	fp, r3
 8002918:	4643      	mov	r3, r8
 800291a:	eb1a 0303 	adds.w	r3, sl, r3
 800291e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002922:	464b      	mov	r3, r9
 8002924:	eb4b 0303 	adc.w	r3, fp, r3
 8002928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002938:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800293c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002940:	460b      	mov	r3, r1
 8002942:	18db      	adds	r3, r3, r3
 8002944:	643b      	str	r3, [r7, #64]	; 0x40
 8002946:	4613      	mov	r3, r2
 8002948:	eb42 0303 	adc.w	r3, r2, r3
 800294c:	647b      	str	r3, [r7, #68]	; 0x44
 800294e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002952:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002956:	f7fd fc3f 	bl	80001d8 <__aeabi_uldivmod>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4611      	mov	r1, r2
 8002960:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <UART_SetConfig+0x2d4>)
 8002962:	fba3 2301 	umull	r2, r3, r3, r1
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2264      	movs	r2, #100	; 0x64
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	1acb      	subs	r3, r1, r3
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002976:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <UART_SetConfig+0x2d4>)
 8002978:	fba3 2302 	umull	r2, r3, r3, r2
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002984:	441c      	add	r4, r3
 8002986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800298a:	2200      	movs	r2, #0
 800298c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002990:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002994:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002998:	4642      	mov	r2, r8
 800299a:	464b      	mov	r3, r9
 800299c:	1891      	adds	r1, r2, r2
 800299e:	63b9      	str	r1, [r7, #56]	; 0x38
 80029a0:	415b      	adcs	r3, r3
 80029a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029a8:	4641      	mov	r1, r8
 80029aa:	1851      	adds	r1, r2, r1
 80029ac:	6339      	str	r1, [r7, #48]	; 0x30
 80029ae:	4649      	mov	r1, r9
 80029b0:	414b      	adcs	r3, r1
 80029b2:	637b      	str	r3, [r7, #52]	; 0x34
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029c0:	4659      	mov	r1, fp
 80029c2:	00cb      	lsls	r3, r1, #3
 80029c4:	4651      	mov	r1, sl
 80029c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ca:	4651      	mov	r1, sl
 80029cc:	00ca      	lsls	r2, r1, #3
 80029ce:	4610      	mov	r0, r2
 80029d0:	4619      	mov	r1, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	4642      	mov	r2, r8
 80029d6:	189b      	adds	r3, r3, r2
 80029d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029dc:	464b      	mov	r3, r9
 80029de:	460a      	mov	r2, r1
 80029e0:	eb42 0303 	adc.w	r3, r2, r3
 80029e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80029f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80029fc:	460b      	mov	r3, r1
 80029fe:	18db      	adds	r3, r3, r3
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a02:	4613      	mov	r3, r2
 8002a04:	eb42 0303 	adc.w	r3, r2, r3
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a12:	f7fd fbe1 	bl	80001d8 <__aeabi_uldivmod>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <UART_SetConfig+0x2d4>)
 8002a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	2164      	movs	r1, #100	; 0x64
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	3332      	adds	r3, #50	; 0x32
 8002a2e:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <UART_SetConfig+0x2d4>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	f003 0207 	and.w	r2, r3, #7
 8002a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4422      	add	r2, r4
 8002a42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a44:	e105      	b.n	8002c52 <UART_SetConfig+0x4d6>
 8002a46:	bf00      	nop
 8002a48:	40011000 	.word	0x40011000
 8002a4c:	40011400 	.word	0x40011400
 8002a50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a66:	4642      	mov	r2, r8
 8002a68:	464b      	mov	r3, r9
 8002a6a:	1891      	adds	r1, r2, r2
 8002a6c:	6239      	str	r1, [r7, #32]
 8002a6e:	415b      	adcs	r3, r3
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
 8002a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a76:	4641      	mov	r1, r8
 8002a78:	1854      	adds	r4, r2, r1
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	eb43 0501 	adc.w	r5, r3, r1
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	00eb      	lsls	r3, r5, #3
 8002a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a8e:	00e2      	lsls	r2, r4, #3
 8002a90:	4614      	mov	r4, r2
 8002a92:	461d      	mov	r5, r3
 8002a94:	4643      	mov	r3, r8
 8002a96:	18e3      	adds	r3, r4, r3
 8002a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a9c:	464b      	mov	r3, r9
 8002a9e:	eb45 0303 	adc.w	r3, r5, r3
 8002aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ab2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ac2:	4629      	mov	r1, r5
 8002ac4:	008b      	lsls	r3, r1, #2
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002acc:	4621      	mov	r1, r4
 8002ace:	008a      	lsls	r2, r1, #2
 8002ad0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ad4:	f7fd fb80 	bl	80001d8 <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4b60      	ldr	r3, [pc, #384]	; (8002c60 <UART_SetConfig+0x4e4>)
 8002ade:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	011c      	lsls	r4, r3, #4
 8002ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002af0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002af4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002af8:	4642      	mov	r2, r8
 8002afa:	464b      	mov	r3, r9
 8002afc:	1891      	adds	r1, r2, r2
 8002afe:	61b9      	str	r1, [r7, #24]
 8002b00:	415b      	adcs	r3, r3
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b08:	4641      	mov	r1, r8
 8002b0a:	1851      	adds	r1, r2, r1
 8002b0c:	6139      	str	r1, [r7, #16]
 8002b0e:	4649      	mov	r1, r9
 8002b10:	414b      	adcs	r3, r1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b20:	4659      	mov	r1, fp
 8002b22:	00cb      	lsls	r3, r1, #3
 8002b24:	4651      	mov	r1, sl
 8002b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b2a:	4651      	mov	r1, sl
 8002b2c:	00ca      	lsls	r2, r1, #3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	4642      	mov	r2, r8
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b3c:	464b      	mov	r3, r9
 8002b3e:	460a      	mov	r2, r1
 8002b40:	eb42 0303 	adc.w	r3, r2, r3
 8002b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b60:	4649      	mov	r1, r9
 8002b62:	008b      	lsls	r3, r1, #2
 8002b64:	4641      	mov	r1, r8
 8002b66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b6a:	4641      	mov	r1, r8
 8002b6c:	008a      	lsls	r2, r1, #2
 8002b6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b72:	f7fd fb31 	bl	80001d8 <__aeabi_uldivmod>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <UART_SetConfig+0x4e4>)
 8002b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	2164      	movs	r1, #100	; 0x64
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	3332      	adds	r3, #50	; 0x32
 8002b8e:	4a34      	ldr	r2, [pc, #208]	; (8002c60 <UART_SetConfig+0x4e4>)
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b9a:	441c      	add	r4, r3
 8002b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ba4:	677a      	str	r2, [r7, #116]	; 0x74
 8002ba6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002baa:	4642      	mov	r2, r8
 8002bac:	464b      	mov	r3, r9
 8002bae:	1891      	adds	r1, r2, r2
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	415b      	adcs	r3, r3
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bba:	4641      	mov	r1, r8
 8002bbc:	1851      	adds	r1, r2, r1
 8002bbe:	6039      	str	r1, [r7, #0]
 8002bc0:	4649      	mov	r1, r9
 8002bc2:	414b      	adcs	r3, r1
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bd2:	4659      	mov	r1, fp
 8002bd4:	00cb      	lsls	r3, r1, #3
 8002bd6:	4651      	mov	r1, sl
 8002bd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bdc:	4651      	mov	r1, sl
 8002bde:	00ca      	lsls	r2, r1, #3
 8002be0:	4610      	mov	r0, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	4603      	mov	r3, r0
 8002be6:	4642      	mov	r2, r8
 8002be8:	189b      	adds	r3, r3, r2
 8002bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bec:	464b      	mov	r3, r9
 8002bee:	460a      	mov	r2, r1
 8002bf0:	eb42 0303 	adc.w	r3, r2, r3
 8002bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8002c00:	667a      	str	r2, [r7, #100]	; 0x64
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c0e:	4649      	mov	r1, r9
 8002c10:	008b      	lsls	r3, r1, #2
 8002c12:	4641      	mov	r1, r8
 8002c14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c18:	4641      	mov	r1, r8
 8002c1a:	008a      	lsls	r2, r1, #2
 8002c1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c20:	f7fd fada 	bl	80001d8 <__aeabi_uldivmod>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <UART_SetConfig+0x4e4>)
 8002c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2164      	movs	r1, #100	; 0x64
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	3332      	adds	r3, #50	; 0x32
 8002c3c:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <UART_SetConfig+0x4e4>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	f003 020f 	and.w	r2, r3, #15
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4422      	add	r2, r4
 8002c50:	609a      	str	r2, [r3, #8]
}
 8002c52:	bf00      	nop
 8002c54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5e:	bf00      	nop
 8002c60:	51eb851f 	.word	0x51eb851f

08002c64 <__libc_init_array>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	4d0d      	ldr	r5, [pc, #52]	; (8002c9c <__libc_init_array+0x38>)
 8002c68:	4c0d      	ldr	r4, [pc, #52]	; (8002ca0 <__libc_init_array+0x3c>)
 8002c6a:	1b64      	subs	r4, r4, r5
 8002c6c:	10a4      	asrs	r4, r4, #2
 8002c6e:	2600      	movs	r6, #0
 8002c70:	42a6      	cmp	r6, r4
 8002c72:	d109      	bne.n	8002c88 <__libc_init_array+0x24>
 8002c74:	4d0b      	ldr	r5, [pc, #44]	; (8002ca4 <__libc_init_array+0x40>)
 8002c76:	4c0c      	ldr	r4, [pc, #48]	; (8002ca8 <__libc_init_array+0x44>)
 8002c78:	f000 f820 	bl	8002cbc <_init>
 8002c7c:	1b64      	subs	r4, r4, r5
 8002c7e:	10a4      	asrs	r4, r4, #2
 8002c80:	2600      	movs	r6, #0
 8002c82:	42a6      	cmp	r6, r4
 8002c84:	d105      	bne.n	8002c92 <__libc_init_array+0x2e>
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
 8002c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8c:	4798      	blx	r3
 8002c8e:	3601      	adds	r6, #1
 8002c90:	e7ee      	b.n	8002c70 <__libc_init_array+0xc>
 8002c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c96:	4798      	blx	r3
 8002c98:	3601      	adds	r6, #1
 8002c9a:	e7f2      	b.n	8002c82 <__libc_init_array+0x1e>
 8002c9c:	08003084 	.word	0x08003084
 8002ca0:	08003084 	.word	0x08003084
 8002ca4:	08003084 	.word	0x08003084
 8002ca8:	08003088 	.word	0x08003088

08002cac <memset>:
 8002cac:	4402      	add	r2, r0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d100      	bne.n	8002cb6 <memset+0xa>
 8002cb4:	4770      	bx	lr
 8002cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cba:	e7f9      	b.n	8002cb0 <memset+0x4>

08002cbc <_init>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	bf00      	nop
 8002cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	469e      	mov	lr, r3
 8002cc6:	4770      	bx	lr

08002cc8 <_fini>:
 8002cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cca:	bf00      	nop
 8002ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cce:	bc08      	pop	{r3}
 8002cd0:	469e      	mov	lr, r3
 8002cd2:	4770      	bx	lr
